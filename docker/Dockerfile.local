# syntax=docker/dockerfile:1.4

ARG GO_IMAGE=golang:1.24.2
ARG RUNTIME_IMAGE=ubuntu:24.04

############################
# Build stage
############################
FROM ${GO_IMAGE} AS builder

WORKDIR /src

# Параметри для різних сервісів
ARG SERVICE_DIR=service-dir
ARG COMMONS_DIR=ecommerce-commons

# 1) Спочатку тільки go.mod/go.sum для кешу модулів
COPY ${SERVICE_DIR}/go.mod ${SERVICE_DIR}/go.sum ./svc/
COPY ${COMMONS_DIR}/go.mod ./${COMMONS_DIR}/go.mod

# 2) Завантаження залежностей (replace у svc/go.mod на ../commons)
WORKDIR /src/svc
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download && go mod verify

# 3) Копіюємо код обох репо
WORKDIR /src
# Copy commons - only Go source code and module files
COPY ${COMMONS_DIR}/go.mod ${COMMONS_DIR}/go.sum ./${COMMONS_DIR}/
COPY ${COMMONS_DIR}/pkg ./${COMMONS_DIR}/pkg

# Copy service - only necessary files
COPY ${SERVICE_DIR}/cmd ./svc/cmd
COPY ${SERVICE_DIR}/internal ./svc/internal
COPY ${SERVICE_DIR}/configs ./svc/configs
COPY ${SERVICE_DIR}/db ./svc/db

# 4) Встановлення Delve debugger
RUN --mount=type=cache,target=/go/pkg/mod \
    go install github.com/go-delve/delve/cmd/dlv@v1.24.0

# 5) Збірка бінарника з debug символами
WORKDIR /src/svc
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    echo "Building in DEBUG mode with symbols..." && \
    CGO_ENABLED=1 GOOS=linux go build -gcflags="all=-N -l" -v -o /server ./cmd/main.go

############################
# Runtime stage
############################
FROM ${RUNTIME_IMAGE} AS release
WORKDIR /

# Копіюємо Delve debugger
COPY --from=builder /go/bin/dlv /dlv

# Копіюємо бінарник сервісу та конфігурації
COPY --from=builder /server /server
COPY --from=builder /src/svc/configs/ /configs/
COPY --from=builder /src/svc/db/ /db/

# Копіюємо вихідний код для debugging (щоб Delve міг мапити breakpoints)
COPY --from=builder /src/svc /app
COPY --from=builder /src/ecommerce-commons /ecommerce-commons

# Основний порт сервісу
EXPOSE 8080

# Debug порт для Delve
EXPOSE 2345

ENTRYPOINT ["/server"]
