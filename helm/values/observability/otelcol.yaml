mode: daemonset

# Підключення до shared-network для доступу до docker-compose сервісів
hostNetwork: true
dnsPolicy: ClusterFirstWithHostNet

service:
  enabled: true
  type: ClusterIP

image:
  repository: otel/opentelemetry-collector-contrib
  tag: latest
  pullPolicy: IfNotPresent

presets:
  kubernetesAttributes:
    enabled: true

config:
  receivers:
    otlp:
      protocols:
        grpc: {}
        http: {}

  processors:
    k8sattributes:
      extract:
        metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.deployment.name
        labels:
          - key: app.kubernetes.io/name
            tag_name: service.name
          - key: app.kubernetes.io/version
            tag_name: service.version
          - key: app.kubernetes.io/environment
            tag_name: deployment.environment
      filter:
        node_from_env_var: K8S_NODE_NAME
      passthrough: false
      pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.pod.ip
        - sources:
            - from: resource_attribute
              name: k8s.pod.uid
        - sources:
            - from: connection
        - sources:                       # <-- ключ: додаткове правило
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name

    attributes/derive-service:
      actions:
        - action: insert
          key: service.name
          from_attribute: k8s.deployment.name
        - action: insert
          key: service.name
          from_attribute: k8s.container.name

    resource/cleanup:
      attributes:
        - action: delete
          key: k8s.container.name
        - action: delete
          key: k8s.deployment.name
        - action: delete
          key: k8s.pod.uid
        - action: delete
          key: k8s.pod.start_time
        - action: delete
          key: k8s.node.name

    batch: {}

  exporters:
    # ТРЕЙСИ → Tempo в docker-compose (через shared-network)
    otlp/tempo:
      endpoint: tempo:4317
      tls:
        insecure: true
    # МЕТРИКИ → Prometheus в docker-compose (через remote write receiver)
    otlphttp/metrics:
      endpoint: http://prometheus:9090/api/v1/otlp
      tls:
        insecure: true
    debug: {}

  service:
    pipelines:
      traces:
        receivers:  [otlp]
        processors: [batch]
        exporters:  [otlp/tempo]
      metrics:
        receivers:  [otlp]
        processors: [batch]
        exporters:  [otlphttp/metrics, debug]
